addpath('C:\Users\colin\Desktop\subterranean_summer_scholars\trunk\StructuredLight\hdr\SLexp')
addpath('C:\Users\colin\Desktop\subterranean_summer_scholars\trunk\StructuredLight\hdr')
clc
warning off all
tic

url_base = ['C:\Users\colin\Desktop\subterranean_summer_scholars\trunk\Data\',...
            'hdrTest_08_13__1742\'];

url_ = [url_base, 'HDRtest'];

n_patterns = 21;
% n_pattern = 3;
bracket = [1/8, 1/4, 1/2, 1];
n_exposures = length(bracket);
curve_SL

im_calib = cell(n_exposures, 1);
% im = cell(n_exposures,1);
% hdr = cell(n_patterns, 1);
rgb = cell(n_patterns, 1);
im_ = zeros(960, 1280, 3);

for i = 1:n_patterns
    for j = 1:n_exposures
        im_orig = imread([url_, 'p', num2str(i), 'e', num2str(j), '.jpg']);
        im_(:,:,1) = im_orig; im_(:,:,2) = im_orig; im_(:,:,3) = im_orig;
%         imshow(im_)
        im_calib{j} = uint16(color_calib(im_, C));
    end
    hdr = make_calib_hdr(im_calib, bracket, C);
    rgb{i} = im2double(tonemap(hdr));
    imwrite(im2double(rgb{i}), [url_base, 'hdr', num2str(i), '.jpg'], 'jpg');
end

% get white and black HDRs
for i = ['w', 'b']
    for j = 1:n_exposures
        im_orig = imread([url_, i, 'e', num2str(j), '.jpg']);
        im_(:,:,1) = im_orig; im_(:,:,2) = im_orig; im_(:,:,3) = im_orig;
        im_calib{j} = uint16(color_calib(im_, C));
    end
    hdr = make_calib_hdr(im_calib, bracket, C);
    rgb{i} = im2double(tonemap(hdr));
    imwrite(im2double(rgb{i}), [url_base, 'hdr_', i, '.jpg'], 'jpg');
end

rgb{'d'} = rgb{'w'}-rgb{'b'};
imwrite(im2double(rgb{'d'}), [url_base, 'hdr_diff', '.jpg'], 'jpg');

save([url_base, 'rgb'],'rgb', 'hdr', 'bracket', 'n_patterns', 'url_base', 'url_');

warning on all
toc
%%
% % % % % % % % % % % % % % % % % % % % % % % % % % % %
% % % % % % % % Process hdr images % % % % % % % % % %
% % % % % % % % % % % % % % % % % % % % % % % % % % % % %
addpath('C:\Users\colin\Desktop\subterranean_summer_scholars\trunk\Data')
addpath('C:\Users\colin\Desktop\subterranean_summer_scholars\trunk\StructuredLight\')
clear all
load rgb.mat
addpath(url_base);

im_gray_x = zeros(size(rgb{'w'}, 1), size(rgb{'w'}, 2), ceil(n_patterns/2)); %Initialize for graycode values
im_gray_y = zeros(size(rgb{'w'}, 1), size(rgb{'w'}, 2), floor(n_patterns/2)); %Initialize for graycode values

% Undistort
fprintf('Decoding patterns\n');

for i = 1:round(n_patterns/2)-2
%     im_gray_x = SLI_bin_decode_a_hdr(rgb{i}, im_gray_x, rgb{'w'}, i); %Get graycode values from image intensity
    im_gray_x = SLI_bin_decode_a(rgb{i}, im_gray_x, rgb{'w'}, rgb{'d'}, i); %Get graycode values from image intensity    
end
for i = round(n_patterns/2)+1:n_patterns-2
%     im_gray_y = SLI_bin_decode_a_hdr(rgb{i}, im_gray_y, rgb{'w'}, i-round(n_patterns/2)); %Get graycode values from image intensity
    im_gray_y = SLI_bin_decode_a(rgb{i}, im_gray_y, rgb{'w'}, rgb{'d'}, i-round(n_patterns/2)); %Get graycode values from image intensity
end


% Convert to binary code. Decode image
im_dec_x = gray2dec(im_gray_x); %get decimal value from graycode for each pixel; Courtesy Siggraph paper: http://mesh.brown.edu/byo3d/
im_dec_y = gray2dec(im_gray_y); %get decimal value from graycode for each pixel; Courtesy Siggraph paper: http://mesh.brown.edu/byo3d/

im_white = rgb{'w'};
clear im_gray_x im_gray_y rgb

fprintf('Decoding image\n');
[model, im_depth] = SLI_bin_decode_dual_b(im_white, im_dec_x, im_dec_y); %generate 3D model from decoded values

model(:,4) = model(:,4)*65536;
% Output raw model
outputModel_dir(url_, model);
save(url_, 'model', 'im_depth', 'im_dec_x', 'im_dec_y');

% % cleanup model
im_interp = interpImage(im_depth, 12);
model2 = cleanupModel(im_interp, model);
model2(:,4) = model2(:,4)*65536;

% save images im im depth model     % % Save for remote testing
fprintf('%10.0f points generated\n', size(model,1));
disp('Start writing to X3D file')

outputModel_dir([url_, '_cleanup'], model2);
disp('Save .mat file')

disp('File complete')
toc(total_time)

