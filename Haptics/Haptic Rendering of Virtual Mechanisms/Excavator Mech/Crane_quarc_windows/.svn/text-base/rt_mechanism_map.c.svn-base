/* SimMechanics target specific file
 *      This file generated a part of SimMechanics code generation.
 */
#include "tmwtypes.h"
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "mtypes.h"
#include "simulation_data.h"
#include "sim_mechanics_imports.h"
boolean_T rt_map_mechanism_params_Crane_63fd34a2(Mechanism * mechanism, const real_T * input, char_T * msg, uint32_T msg_size)
{
    static real_T work[1557];
    real_T *output = 0;
    boolean_T error = 0;
    output = mechanism->runtimeData;
    memset(work, 0, sizeof(work));
    work[0] = 1.0;
    work[7] = 1.0;
    work[8] = 1.0;
    work[12] = 1.0;
    work[16] = 1.0;
    work[895] = 1.0;
    work[1118] = 1.0;
    work[1122] = 1.0;
    work[1126] = 1.0;
    work[1155] = 1.0;
    work[1159] = 1.0;
    work[1163] = 1.0;
    work[1186] = 1.0;
    work[1190] = 1.0;
    work[1194] = 1.0;
    work[1217] = 1.0;
    work[1221] = 1.0;
    work[1225] = 1.0;
    work[1248] = 1.0;
    work[1252] = 1.0;
    work[1256] = 1.0;
    work[1279] = 1.0;
    work[1283] = 1.0;
    work[1287] = 1.0;
    work[1310] = 1.0;
    work[1314] = 1.0;
    work[1318] = 1.0;
    work[1341] = 1.0;
    work[1345] = 1.0;
    work[1349] = 1.0;
    work[1372] = 1.0;
    work[1376] = 1.0;
    work[1380] = 1.0;
    work[1403] = 1.0;
    work[1407] = 1.0;
    work[1411] = 1.0;
    work[1434] = 1.0;
    work[1438] = 1.0;
    work[1442] = 1.0;
    work[1548] = 1.0;
    work[1552] = 1.0;
    work[1556] = 1.0;
    pmVectorFunction((work + 17), (input + 364), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 20), (input + 367), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 20), (work + 23));
    pmVectorFunction((work + 32), (input + 380), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 35), (input + 383), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 35), (work + 38));
    pmVectorFunction((work + 47), (input + 386), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 50), (input + 389), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 50), (work + 53));
    pmVectorFunction((work + 62), (input + 379), (work + 1), 0.0, 1.0, 0.0, 1, 1, 1, 0);
    pmVectorFunction((work + 63), (input + 370), (work + 1), 0.0, 1.0, 0.0, 9, 1, 1, 0);
    memcpy((work + 72), (work + 63), (9 * sizeof(double)));
    pmVectorFunction((work + 81), (input + 321), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 84), (input + 324), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 84), (work + 87));
    pmVectorFunction((work + 96), (input + 337), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 99), (input + 340), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 99), (work + 102));
    pmVectorFunction((work + 111), (input + 343), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 114), (input + 346), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 114), (work + 117));
    pmVectorFunction((work + 126), (input + 349), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 129), (input + 352), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 129), (work + 132));
    pmVectorFunction((work + 141), (input + 355), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 144), (input + 358), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 144), (work + 147));
    pmVectorFunction((work + 156), (input + 336), (work + 1), 0.0, 1.0, 0.0, 1, 1, 1, 0);
    pmVectorFunction((work + 157), (input + 327), (work + 1), 0.0, 1.0, 0.0, 9, 1, 1, 0);
    memcpy((work + 166), (work + 157), (9 * sizeof(double)));
    pmVectorFunction((work + 175), (input + 290), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 178), (input + 293), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 178), (work + 181));
    pmVectorFunction((work + 190), (input + 306), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 193), (input + 309), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 193), (work + 196));
    pmVectorFunction((work + 205), (input + 312), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 208), (input + 315), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 208), (work + 211));
    pmVectorFunction((work + 220), (input + 305), (work + 1), 0.0, 1.0, 0.0, 1, 1, 1, 0);
    pmVectorFunction((work + 221), (input + 296), (work + 1), 0.0, 1.0, 0.0, 9, 1, 1, 0);
    memcpy((work + 230), (work + 221), (9 * sizeof(double)));
    pmVectorFunction((work + 239), (input + 259), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 242), (input + 262), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 242), (work + 245));
    pmVectorFunction((work + 254), (input + 275), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 257), (input + 278), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 257), (work + 260));
    pmVectorFunction((work + 269), (input + 281), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 272), (input + 284), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 272), (work + 275));
    pmVectorFunction((work + 284), (input + 274), (work + 1), 0.0, 1.0, 0.0, 1, 1, 1, 0);
    pmVectorFunction((work + 285), (input + 265), (work + 1), 0.0, 1.0, 0.0, 9, 1, 1, 0);
    memcpy((work + 294), (work + 285), (9 * sizeof(double)));
    pmVectorFunction((work + 303), (input + 222), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 306), (input + 225), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 306), (work + 309));
    pmVectorFunction((work + 318), (input + 238), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 321), (input + 241), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 321), (work + 324));
    pmVectorFunction((work + 333), (input + 244), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 336), (input + 247), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 336), (work + 339));
    pmVectorFunction((work + 348), (input + 237), (work + 1), 0.0, 1.0, 0.0, 1, 1, 1, 0);
    pmVectorFunction((work + 349), (input + 228), (work + 1), 0.0, 1.0, 0.0, 9, 1, 1, 0);
    memcpy((work + 358), (work + 349), (9 * sizeof(double)));
    pmVectorFunction((work + 367), (input + 188), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 370), (input + 191), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 370), (work + 373));
    pmVectorFunction((work + 382), (input + 204), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 385), (input + 207), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 385), (work + 388));
    pmVectorFunction((work + 397), (input + 210), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 400), (input + 213), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 400), (work + 403));
    pmVectorFunction((work + 412), (input + 203), (work + 1), 0.0, 1.0, 0.0, 1, 1, 1, 0);
    pmVectorFunction((work + 413), (input + 194), (work + 1), 0.0, 1.0, 0.0, 9, 1, 1, 0);
    memcpy((work + 422), (work + 413), (9 * sizeof(double)));
    pmVectorFunction((work + 431), (input + 151), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 434), (input + 154), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 434), (work + 437));
    pmVectorFunction((work + 446), (input + 167), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 449), (input + 170), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 449), (work + 452));
    pmVectorFunction((work + 461), (input + 173), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 464), (input + 176), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 464), (work + 467));
    pmVectorFunction((work + 476), (input + 166), (work + 1), 0.0, 1.0, 0.0, 1, 1, 1, 0);
    pmVectorFunction((work + 477), (input + 157), (work + 1), 0.0, 1.0, 0.0, 9, 1, 1, 0);
    memcpy((work + 486), (work + 477), (9 * sizeof(double)));
    pmVectorFunction((work + 495), (input + 108), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 498), (input + 111), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 498), (work + 501));
    pmVectorFunction((work + 510), (input + 124), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 513), (input + 127), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 513), (work + 516));
    pmVectorFunction((work + 525), (input + 130), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 528), (input + 133), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 528), (work + 531));
    pmVectorFunction((work + 540), (input + 136), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 543), (input + 139), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 543), (work + 546));
    pmVectorFunction((work + 555), (input + 142), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 558), (input + 145), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 558), (work + 561));
    pmVectorFunction((work + 570), (input + 123), (work + 1), 0.0, 1.0, 0.0, 1, 1, 1, 0);
    pmVectorFunction((work + 571), (input + 114), (work + 1), 0.0, 1.0, 0.0, 9, 1, 1, 0);
    memcpy((work + 580), (work + 571), (9 * sizeof(double)));
    pmVectorFunction((work + 589), (input + 77), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 592), (input + 80), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 592), (work + 595));
    pmVectorFunction((work + 604), (input + 93), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 607), (input + 96), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 607), (work + 610));
    pmVectorFunction((work + 619), (input + 99), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 622), (input + 102), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 622), (work + 625));
    pmVectorFunction((work + 634), (input + 92), (work + 1), 0.0, 1.0, 0.0, 1, 1, 1, 0);
    pmVectorFunction((work + 635), (input + 83), (work + 1), 0.0, 1.0, 0.0, 9, 1, 1, 0);
    memcpy((work + 644), (work + 635), (9 * sizeof(double)));
    pmVectorFunction((work + 653), (input + 46), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 656), (input + 49), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 656), (work + 659));
    pmVectorFunction((work + 668), (input + 62), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 671), (input + 65), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 671), (work + 674));
    pmVectorFunction((work + 683), (input + 68), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 686), (input + 71), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 686), (work + 689));
    pmVectorFunction((work + 698), (input + 61), (work + 1), 0.0, 1.0, 0.0, 1, 1, 1, 0);
    pmVectorFunction((work + 699), (input + 52), (work + 1), 0.0, 1.0, 0.0, 9, 1, 1, 0);
    memcpy((work + 708), (work + 699), (9 * sizeof(double)));
    pmVectorFunction((work + 717), (input + 3), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 720), (input + 6), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 720), (work + 723));
    pmVectorFunction((work + 732), (input + 19), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 735), (input + 22), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 735), (work + 738));
    pmVectorFunction((work + 747), (input + 25), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 750), (input + 28), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 750), (work + 753));
    pmVectorFunction((work + 762), (input + 31), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 765), (input + 34), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 765), (work + 768));
    pmVectorFunction((work + 777), (input + 37), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 780), (input + 40), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 780), (work + 783));
    pmVectorFunction((work + 792), (input + 18), (work + 1), 0.0, 1.0, 0.0, 1, 1, 1, 0);
    pmVectorFunction((work + 793), (input + 9), (work + 1), 0.0, 1.0, 0.0, 9, 1, 1, 0);
    memcpy((work + 802), (work + 793), (9 * sizeof(double)));
    pmMult((work + 814), (input + 361), (input + 361), 3, 1, 3, 1, 1, 1, 3);
    work[814] = sqrt(work[814]);
    if (work[814] == 0.0)
    {
        strncpy(msg, "Crane/Revolute8: Joint primitive R1 has an invalid axis.  Axis must evaluate to a 1-by-3 matrix.  Check and reconfigure primitive axis vector.", msg_size);
        error = 1;
        goto EXIT_POINT;
    }
    work[814] = (1.0 / work[814]);
    pmVectorFunction((work + 811), (input + 361), (work + 814), 1.0, 0.0, 0.0, 3, 1, 1, 0);
    pmMult((work + 818), (input + 318), (input + 318), 3, 1, 3, 1, 1, 1, 3);
    work[818] = sqrt(work[818]);
    if (work[818] == 0.0)
    {
        strncpy(msg, "Crane/Revolute6: Joint primitive R1 has an invalid axis.  Axis must evaluate to a 1-by-3 matrix.  Check and reconfigure primitive axis vector.", msg_size);
        error = 1;
        goto EXIT_POINT;
    }
    work[818] = (1.0 / work[818]);
    pmVectorFunction((work + 815), (input + 318), (work + 818), 1.0, 0.0, 0.0, 3, 1, 1, 0);
    pmMult((work + 822), (input + 287), (input + 287), 3, 1, 3, 1, 1, 1, 3);
    work[822] = sqrt(work[822]);
    if (work[822] == 0.0)
    {
        strncpy(msg, "Crane/Prismatic2: Joint primitive P1 has an invalid axis.  Axis must evaluate to a 1-by-3 matrix.  Check and reconfigure primitive axis vector.", msg_size);
        error = 1;
        goto EXIT_POINT;
    }
    work[822] = (1.0 / work[822]);
    pmVectorFunction((work + 819), (input + 287), (work + 822), 1.0, 0.0, 0.0, 3, 1, 1, 0);
    pmMult((work + 826), (input + 256), (input + 256), 3, 1, 3, 1, 1, 1, 3);
    work[826] = sqrt(work[826]);
    if (work[826] == 0.0)
    {
        strncpy(msg, "Crane/Revolute9: Joint primitive R1 has an invalid axis.  Axis must evaluate to a 1-by-3 matrix.  Check and reconfigure primitive axis vector.", msg_size);
        error = 1;
        goto EXIT_POINT;
    }
    work[826] = (1.0 / work[826]);
    pmVectorFunction((work + 823), (input + 256), (work + 826), 1.0, 0.0, 0.0, 3, 1, 1, 0);
    pmMult((work + 830), (input + 250), (input + 250), 3, 1, 3, 1, 1, 1, 3);
    work[830] = sqrt(work[830]);
    if (work[830] == 0.0)
    {
        strncpy(msg, "Crane/Revolute: Joint primitive R1 has an invalid axis.  Axis must evaluate to a 1-by-3 matrix.  Check and reconfigure primitive axis vector.", msg_size);
        error = 1;
        goto EXIT_POINT;
    }
    work[830] = (1.0 / work[830]);
    pmVectorFunction((work + 827), (input + 250), (work + 830), 1.0, 0.0, 0.0, 3, 1, 1, 0);
    pmMult((work + 834), (input + 219), (input + 219), 3, 1, 3, 1, 1, 1, 3);
    work[834] = sqrt(work[834]);
    if (work[834] == 0.0)
    {
        strncpy(msg, "Crane/Revolute3: Joint primitive R1 has an invalid axis.  Axis must evaluate to a 1-by-3 matrix.  Check and reconfigure primitive axis vector.", msg_size);
        error = 1;
        goto EXIT_POINT;
    }
    work[834] = (1.0 / work[834]);
    pmVectorFunction((work + 831), (input + 219), (work + 834), 1.0, 0.0, 0.0, 3, 1, 1, 0);
    pmMult((work + 838), (input + 216), (input + 216), 3, 1, 3, 1, 1, 1, 3);
    work[838] = sqrt(work[838]);
    if (work[838] == 0.0)
    {
        strncpy(msg, "Crane/Revolute5: Joint primitive R1 has an invalid axis.  Axis must evaluate to a 1-by-3 matrix.  Check and reconfigure primitive axis vector.", msg_size);
        error = 1;
        goto EXIT_POINT;
    }
    work[838] = (1.0 / work[838]);
    pmVectorFunction((work + 835), (input + 216), (work + 838), 1.0, 0.0, 0.0, 3, 1, 1, 0);
    pmMult((work + 842), (input + 179), (input + 179), 3, 1, 3, 1, 1, 1, 3);
    work[842] = sqrt(work[842]);
    if (work[842] == 0.0)
    {
        strncpy(msg, "Crane/Revolute2: Joint primitive R1 has an invalid axis.  Axis must evaluate to a 1-by-3 matrix.  Check and reconfigure primitive axis vector.", msg_size);
        error = 1;
        goto EXIT_POINT;
    }
    work[842] = (1.0 / work[842]);
    pmVectorFunction((work + 839), (input + 179), (work + 842), 1.0, 0.0, 0.0, 3, 1, 1, 0);
    pmMult((work + 846), (input + 148), (input + 148), 3, 1, 3, 1, 1, 1, 3);
    work[846] = sqrt(work[846]);
    if (work[846] == 0.0)
    {
        strncpy(msg, "Crane/Prismatic: Joint primitive P1 has an invalid axis.  Axis must evaluate to a 1-by-3 matrix.  Check and reconfigure primitive axis vector.", msg_size);
        error = 1;
        goto EXIT_POINT;
    }
    work[846] = (1.0 / work[846]);
    pmVectorFunction((work + 843), (input + 148), (work + 846), 1.0, 0.0, 0.0, 3, 1, 1, 0);
    pmMult((work + 850), (input + 105), (input + 105), 3, 1, 3, 1, 1, 1, 3);
    work[850] = sqrt(work[850]);
    if (work[850] == 0.0)
    {
        strncpy(msg, "Crane/Revolute1: Joint primitive R1 has an invalid axis.  Axis must evaluate to a 1-by-3 matrix.  Check and reconfigure primitive axis vector.", msg_size);
        error = 1;
        goto EXIT_POINT;
    }
    work[850] = (1.0 / work[850]);
    pmVectorFunction((work + 847), (input + 105), (work + 850), 1.0, 0.0, 0.0, 3, 1, 1, 0);
    pmMult((work + 854), (input + 74), (input + 74), 3, 1, 3, 1, 1, 1, 3);
    work[854] = sqrt(work[854]);
    if (work[854] == 0.0)
    {
        strncpy(msg, "Crane/Prismatic1: Joint primitive P1 has an invalid axis.  Axis must evaluate to a 1-by-3 matrix.  Check and reconfigure primitive axis vector.", msg_size);
        error = 1;
        goto EXIT_POINT;
    }
    work[854] = (1.0 / work[854]);
    pmVectorFunction((work + 851), (input + 74), (work + 854), 1.0, 0.0, 0.0, 3, 1, 1, 0);
    pmMult((work + 858), (input + 43), (input + 43), 3, 1, 3, 1, 1, 1, 3);
    work[858] = sqrt(work[858]);
    if (work[858] == 0.0)
    {
        strncpy(msg, "Crane/Revolute4: Joint primitive R1 has an invalid axis.  Axis must evaluate to a 1-by-3 matrix.  Check and reconfigure primitive axis vector.", msg_size);
        error = 1;
        goto EXIT_POINT;
    }
    work[858] = (1.0 / work[858]);
    pmVectorFunction((work + 855), (input + 43), (work + 858), 1.0, 0.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 862), (input + 253), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 865), (work + 859), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 865), (work + 868));
    pmVectorFunction((work + 880), (input + 182), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 883), (work + 877), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 883), (work + 886));
    pmVectorFunction((work + 912), (work + 906), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 915), (work + 909), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(1, (work + 915), (work + 918));
    pmVectorFunction((work + 927), (input + 253), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 930), (work + 859), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(0, (work + 930), (work + 933));
    pmVectorFunction((work + 942), (input + 182), (work + 1), 0.0, 1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 945), (work + 877), (work + 1), 0.0, 0.01745329251994329500, 0.0, 3, 1, 1, 0);
    pmConvertToRotationMatrix(0, (work + 945), (work + 948));
    pmVectorFunction((work + 957), (work + 896), (work + 1), 0.0, 1.0, 0.0, 1, 1, 1, 0);
    pmVectorFunction((work + 958), (work + 897), (work + 1), 0.0, 1.0, 0.0, 9, 1, 1, 0);
    memcpy((work + 967), (work + 958), (9 * sizeof(double)));
    pmMult((work + 976), (work + 211), (work + 102), 3, 3, 3, 3, 1, 1, 1);
    pmMult((work + 985), (work + 275), (work + 196), 3, 3, 3, 3, 1, 1, 1);
    pmMult((work + 994), (work + 625), (work + 674), 3, 3, 3, 3, 1, 1, 1);
    pmMult((work + 1003), (work + 38), (work + 17), 3, 3, 3, 1, 1, 1, 1);
    pmVectorFunction((work + 1006), (work + 32), (work + 1003), 0.0, 1.0, 1.0, 3, 1, 1, 1);
    pmMult((work + 1009), (work + 976), (work + 81), 3, 3, 3, 1, 1, 1, 1);
    pmVectorFunction((work + 1012), (work + 96), (work + 1009), 0.0, 1.0, 1.0, 3, 1, 1, 1);
    pmMult((work + 1015), (work + 275), (work + 190), 3, 3, 3, 1, 1, 1, 1);
    pmVectorFunction((work + 1018), (work + 269), (work + 1015), 0.0, 1.0, 1.0, 3, 1, 1, 1);
    pmMult((work + 1021), (work + 985), (work + 175), 3, 3, 3, 1, 1, 1, 1);
    pmVectorFunction((work + 1024), (work + 1018), (work + 1021), 0.0, 1.0, 1.0, 3, 1, 1, 1);
    pmMult((work + 1027), (work + 985), (work + 205), 3, 3, 3, 1, 1, 1, 1);
    pmVectorFunction((work + 1030), (work + 1018), (work + 1027), 0.0, 1.0, 1.0, 3, 1, 1, 1);
    pmMult((work + 1033), (work + 260), (work + 239), 3, 3, 3, 1, 1, 1, 1);
    pmVectorFunction((work + 1036), (work + 254), (work + 1033), 0.0, 1.0, 1.0, 3, 1, 1, 1);
    pmMult((work + 1039), (work + 324), (work + 303), 3, 3, 3, 1, 1, 1, 1);
    pmVectorFunction((work + 1042), (work + 318), (work + 1039), 0.0, 1.0, 1.0, 3, 1, 1, 1);
    pmMult((work + 1045), (work + 388), (work + 367), 3, 3, 3, 1, 1, 1, 1);
    pmVectorFunction((work + 1048), (work + 382), (work + 1045), 0.0, 1.0, 1.0, 3, 1, 1, 1);
    pmMult((work + 1051), (work + 452), (work + 431), 3, 3, 3, 1, 1, 1, 1);
    pmVectorFunction((work + 1054), (work + 446), (work + 1051), 0.0, 1.0, 1.0, 3, 1, 1, 1);
    pmMult((work + 1057), (work + 516), (work + 495), 3, 3, 3, 1, 1, 1, 1);
    pmVectorFunction((work + 1060), (work + 510), (work + 1057), 0.0, 1.0, 1.0, 3, 1, 1, 1);
    pmMult((work + 1063), (work + 610), (work + 589), 3, 3, 3, 1, 1, 1, 1);
    pmVectorFunction((work + 1066), (work + 604), (work + 1063), 0.0, 1.0, 1.0, 3, 1, 1, 1);
    pmMult((work + 1069), (work + 625), (work + 668), 3, 3, 3, 1, 1, 1, 1);
    pmVectorFunction((work + 1072), (work + 619), (work + 1069), 0.0, 1.0, 1.0, 3, 1, 1, 1);
    pmMult((work + 1075), (work + 994), (work + 653), 3, 3, 3, 1, 1, 1, 1);
    pmVectorFunction((work + 1078), (work + 1072), (work + 1075), 0.0, 1.0, 1.0, 3, 1, 1, 1);
    pmMult((work + 1081), (work + 994), (work + 683), 3, 3, 3, 1, 1, 1, 1);
    pmVectorFunction((work + 1084), (work + 1072), (work + 1081), 0.0, 1.0, 1.0, 3, 1, 1, 1);
    pmMult((work + 1087), (work + 738), (work + 717), 3, 3, 3, 1, 1, 1, 1);
    pmVectorFunction((work + 1090), (work + 732), (work + 1087), 0.0, 1.0, 1.0, 3, 1, 1, 1);
    pmVectorFunction((work + 1093), (work + 912), (work + 1), 0.0, -1.0, 0.0, 3, 1, 1, 0);
    pmVectorFunction((work + 1096), (work + 1006), (work + 32), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmMult((work + 1099), (work + 63), (work + 23), 3, 3, 3, 3, 1, 1, 2);
    pmMult((work + 63), (work + 23), (work + 1099), 3, 3, 3, 3, 1, 1, 1);
    pmMult((work + 1117), (work + 1096), (work + 1096), 3, 1, 3, 1, 1, 1, 3);
    pmVectorFunction((work + 1099), (work + 8), (work + 1117), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmMult((work + 1108), (work + 1096), (work + 1096), 3, 1, 3, 1, 1, 1, 2);
    pmVectorFunction((work + 1099), (work + 1099), (work + 1108), 0.0, 1.0, -1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1099), (work + 1099), (work + 62), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmVectorFunction((work + 63), (work + 63), (work + 1099), 0.0, 1.0, 1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1127), (work + 1012), (work + 111), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmMult((work + 1130), (work + 157), (work + 87), 3, 3, 3, 3, 1, 1, 2);
    pmMult((work + 157), (work + 87), (work + 1130), 3, 3, 3, 3, 1, 1, 1);
    pmMult((work + 1148), (work + 1127), (work + 1127), 3, 1, 3, 1, 1, 1, 3);
    pmVectorFunction((work + 1130), (work + 8), (work + 1148), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmMult((work + 1139), (work + 1127), (work + 1127), 3, 1, 3, 1, 1, 1, 2);
    pmVectorFunction((work + 1130), (work + 1130), (work + 1139), 0.0, 1.0, -1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1130), (work + 1130), (work + 156), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmVectorFunction((work + 157), (work + 157), (work + 1130), 0.0, 1.0, 1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1149), (work + 141), (work + 111), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmVectorFunction((work + 1152), (work + 126), (work + 111), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmVectorFunction((work + 1164), (work + 1024), (work + 1030), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmMult((work + 1167), (work + 221), (work + 181), 3, 3, 3, 3, 1, 1, 2);
    pmMult((work + 221), (work + 181), (work + 1167), 3, 3, 3, 3, 1, 1, 1);
    pmMult((work + 1185), (work + 1164), (work + 1164), 3, 1, 3, 1, 1, 1, 3);
    pmVectorFunction((work + 1167), (work + 8), (work + 1185), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmMult((work + 1176), (work + 1164), (work + 1164), 3, 1, 3, 1, 1, 1, 2);
    pmVectorFunction((work + 1167), (work + 1167), (work + 1176), 0.0, 1.0, -1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1167), (work + 1167), (work + 220), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmVectorFunction((work + 221), (work + 221), (work + 1167), 0.0, 1.0, 1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1195), (work + 1036), (work + 269), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmMult((work + 1198), (work + 285), (work + 245), 3, 3, 3, 3, 1, 1, 2);
    pmMult((work + 285), (work + 245), (work + 1198), 3, 3, 3, 3, 1, 1, 1);
    pmMult((work + 1216), (work + 1195), (work + 1195), 3, 1, 3, 1, 1, 1, 3);
    pmVectorFunction((work + 1198), (work + 8), (work + 1216), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmMult((work + 1207), (work + 1195), (work + 1195), 3, 1, 3, 1, 1, 1, 2);
    pmVectorFunction((work + 1198), (work + 1198), (work + 1207), 0.0, 1.0, -1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1198), (work + 1198), (work + 284), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmVectorFunction((work + 285), (work + 285), (work + 1198), 0.0, 1.0, 1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1226), (work + 1042), (work + 318), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmMult((work + 1229), (work + 349), (work + 309), 3, 3, 3, 3, 1, 1, 2);
    pmMult((work + 349), (work + 309), (work + 1229), 3, 3, 3, 3, 1, 1, 1);
    pmMult((work + 1247), (work + 1226), (work + 1226), 3, 1, 3, 1, 1, 1, 3);
    pmVectorFunction((work + 1229), (work + 8), (work + 1247), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmMult((work + 1238), (work + 1226), (work + 1226), 3, 1, 3, 1, 1, 1, 2);
    pmVectorFunction((work + 1229), (work + 1229), (work + 1238), 0.0, 1.0, -1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1229), (work + 1229), (work + 348), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmVectorFunction((work + 349), (work + 349), (work + 1229), 0.0, 1.0, 1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1257), (work + 1048), (work + 382), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmMult((work + 1260), (work + 413), (work + 373), 3, 3, 3, 3, 1, 1, 2);
    pmMult((work + 413), (work + 373), (work + 1260), 3, 3, 3, 3, 1, 1, 1);
    pmMult((work + 1278), (work + 1257), (work + 1257), 3, 1, 3, 1, 1, 1, 3);
    pmVectorFunction((work + 1260), (work + 8), (work + 1278), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmMult((work + 1269), (work + 1257), (work + 1257), 3, 1, 3, 1, 1, 1, 2);
    pmVectorFunction((work + 1260), (work + 1260), (work + 1269), 0.0, 1.0, -1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1260), (work + 1260), (work + 412), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmVectorFunction((work + 413), (work + 413), (work + 1260), 0.0, 1.0, 1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1288), (work + 1054), (work + 446), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmMult((work + 1291), (work + 477), (work + 437), 3, 3, 3, 3, 1, 1, 2);
    pmMult((work + 477), (work + 437), (work + 1291), 3, 3, 3, 3, 1, 1, 1);
    pmMult((work + 1309), (work + 1288), (work + 1288), 3, 1, 3, 1, 1, 1, 3);
    pmVectorFunction((work + 1291), (work + 8), (work + 1309), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmMult((work + 1300), (work + 1288), (work + 1288), 3, 1, 3, 1, 1, 1, 2);
    pmVectorFunction((work + 1291), (work + 1291), (work + 1300), 0.0, 1.0, -1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1291), (work + 1291), (work + 476), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmVectorFunction((work + 477), (work + 477), (work + 1291), 0.0, 1.0, 1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1319), (work + 1060), (work + 525), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmMult((work + 1322), (work + 571), (work + 501), 3, 3, 3, 3, 1, 1, 2);
    pmMult((work + 571), (work + 501), (work + 1322), 3, 3, 3, 3, 1, 1, 1);
    pmMult((work + 1340), (work + 1319), (work + 1319), 3, 1, 3, 1, 1, 1, 3);
    pmVectorFunction((work + 1322), (work + 8), (work + 1340), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmMult((work + 1331), (work + 1319), (work + 1319), 3, 1, 3, 1, 1, 1, 2);
    pmVectorFunction((work + 1322), (work + 1322), (work + 1331), 0.0, 1.0, -1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1322), (work + 1322), (work + 570), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmVectorFunction((work + 571), (work + 571), (work + 1322), 0.0, 1.0, 1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1350), (work + 1066), (work + 604), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmMult((work + 1353), (work + 635), (work + 595), 3, 3, 3, 3, 1, 1, 2);
    pmMult((work + 635), (work + 595), (work + 1353), 3, 3, 3, 3, 1, 1, 1);
    pmMult((work + 1371), (work + 1350), (work + 1350), 3, 1, 3, 1, 1, 1, 3);
    pmVectorFunction((work + 1353), (work + 8), (work + 1371), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmMult((work + 1362), (work + 1350), (work + 1350), 3, 1, 3, 1, 1, 1, 2);
    pmVectorFunction((work + 1353), (work + 1353), (work + 1362), 0.0, 1.0, -1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1353), (work + 1353), (work + 634), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmVectorFunction((work + 635), (work + 635), (work + 1353), 0.0, 1.0, 1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1381), (work + 1078), (work + 1072), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmMult((work + 1384), (work + 699), (work + 659), 3, 3, 3, 3, 1, 1, 2);
    pmMult((work + 699), (work + 659), (work + 1384), 3, 3, 3, 3, 1, 1, 1);
    pmMult((work + 1402), (work + 1381), (work + 1381), 3, 1, 3, 1, 1, 1, 3);
    pmVectorFunction((work + 1384), (work + 8), (work + 1402), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmMult((work + 1393), (work + 1381), (work + 1381), 3, 1, 3, 1, 1, 1, 2);
    pmVectorFunction((work + 1384), (work + 1384), (work + 1393), 0.0, 1.0, -1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1384), (work + 1384), (work + 698), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmVectorFunction((work + 699), (work + 699), (work + 1384), 0.0, 1.0, 1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1412), (work + 1090), (work + 747), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmMult((work + 1415), (work + 793), (work + 723), 3, 3, 3, 3, 1, 1, 2);
    pmMult((work + 793), (work + 723), (work + 1415), 3, 3, 3, 3, 1, 1, 1);
    pmMult((work + 1433), (work + 1412), (work + 1412), 3, 1, 3, 1, 1, 1, 3);
    pmVectorFunction((work + 1415), (work + 8), (work + 1433), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmMult((work + 1424), (work + 1412), (work + 1412), 3, 1, 3, 1, 1, 1, 2);
    pmVectorFunction((work + 1415), (work + 1415), (work + 1424), 0.0, 1.0, -1.0, 9, 1, 1, 1);
    pmVectorFunction((work + 1415), (work + 1415), (work + 792), 1.0, 0.0, 0.0, 9, 1, 1, 0);
    pmVectorFunction((work + 793), (work + 793), (work + 1415), 0.0, 1.0, 1.0, 9, 1, 1, 1);
    work[1443] = work[1];
    work[1444] = work[1];
    work[1445] = work[1];
    pmVectorFunction((work + 1446), (work + 111), (work + 47), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    work[1449] = work[1];
    work[1450] = work[1];
    work[1451] = work[1];
    pmVectorFunction((work + 1452), (work + 1030), (work + 96), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    work[1455] = work[1];
    work[1456] = work[1];
    work[1457] = work[1];
    pmVectorFunction((work + 1458), (work + 269), (work + 1018), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmMult((work + 1461), (work + 819), (work + 985), 1, 3, 3, 3, 1, 1, 2);
    work[1464] = work[1];
    work[1465] = work[1];
    work[1466] = work[1];
    pmVectorFunction((work + 1467), (work + 318), (work + 927), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    work[1470] = work[1];
    work[1471] = work[1];
    work[1472] = work[1];
    pmVectorFunction((work + 1473), (work + 525), (work + 333), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    work[1476] = work[1];
    work[1477] = work[1];
    work[1478] = work[1];
    pmVectorFunction((work + 1479), (work + 747), (work + 397), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    work[1482] = work[1];
    work[1483] = work[1];
    work[1484] = work[1];
    pmVectorFunction((work + 1485), (work + 382), (work + 540), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    work[1488] = work[1];
    work[1489] = work[1];
    work[1490] = work[1];
    pmVectorFunction((work + 1491), (work + 446), (work + 942), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    work[1494] = work[1];
    work[1495] = work[1];
    work[1496] = work[1];
    pmVectorFunction((work + 1497), (work + 604), (work + 555), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    work[1500] = work[1];
    work[1501] = work[1];
    work[1502] = work[1];
    pmVectorFunction((work + 1503), (work + 1072), (work + 619), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmMult((work + 1506), (work + 851), (work + 994), 1, 3, 3, 3, 1, 1, 2);
    work[1509] = work[1];
    work[1510] = work[1];
    work[1511] = work[1];
    pmVectorFunction((work + 1512), (work + 32), (work + 777), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    work[1515] = work[1];
    work[1516] = work[1];
    work[1517] = work[1];
    pmVectorFunction((work + 1518), (work + 1084), (work + 1072), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmVectorFunction((work + 1521), (work + 732), (work + 747), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    work[1524] = work[1];
    work[1525] = work[1];
    work[1526] = work[1];
    pmVectorFunction((work + 1527), (work + 461), (work + 446), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmVectorFunction((work + 1530), (work + 510), (work + 525), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmMult((work + 1533), (work + 843), (work + 516), 1, 3, 3, 3, 1, 1, 2);
    work[1536] = work[1];
    work[1537] = work[1];
    work[1538] = work[1];
    pmVectorFunction((work + 1539), (work + 762), (work + 747), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    pmVectorFunction((work + 1542), (work + 254), (work + 269), 0.0, 1.0, -1.0, 3, 1, 1, 1);
    work[1545] = work[1];
    work[1546] = work[1];
    work[1547] = work[1];
    output[0] = work[62];
    memcpy((output + 1), (work + 72), (9 * sizeof(double)));
    output[10] = work[156];
    memcpy((output + 11), (work + 166), (9 * sizeof(double)));
    output[20] = work[220];
    memcpy((output + 21), (work + 230), (9 * sizeof(double)));
    output[30] = work[284];
    memcpy((output + 31), (work + 294), (9 * sizeof(double)));
    output[40] = work[348];
    memcpy((output + 41), (work + 358), (9 * sizeof(double)));
    output[50] = work[412];
    memcpy((output + 51), (work + 422), (9 * sizeof(double)));
    output[60] = work[476];
    memcpy((output + 61), (work + 486), (9 * sizeof(double)));
    output[70] = work[570];
    memcpy((output + 71), (work + 580), (9 * sizeof(double)));
    output[80] = work[634];
    memcpy((output + 81), (work + 644), (9 * sizeof(double)));
    output[90] = work[698];
    memcpy((output + 91), (work + 708), (9 * sizeof(double)));
    output[100] = work[792];
    memcpy((output + 101), (work + 802), (9 * sizeof(double)));
    output[110] = work[957];
    memcpy((output + 111), (work + 967), (9 * sizeof(double)));
    memcpy((output + 120), (work + 918), (9 * sizeof(double)));
    memcpy((output + 129), (work + 933), (9 * sizeof(double)));
    memcpy((output + 138), (work + 948), (9 * sizeof(double)));
    memcpy((output + 147), (work + 23), (9 * sizeof(double)));
    memcpy((output + 156), (work + 38), (9 * sizeof(double)));
    memcpy((output + 165), (work + 53), (9 * sizeof(double)));
    memcpy((output + 174), (work + 87), (9 * sizeof(double)));
    memcpy((output + 183), (work + 211), (9 * sizeof(double)));
    memcpy((output + 192), (work + 976), (9 * sizeof(double)));
    memcpy((output + 201), (work + 117), (9 * sizeof(double)));
    memcpy((output + 210), (work + 132), (9 * sizeof(double)));
    memcpy((output + 219), (work + 147), (9 * sizeof(double)));
    memcpy((output + 228), (work + 181), (9 * sizeof(double)));
    memcpy((output + 237), (work + 275), (9 * sizeof(double)));
    memcpy((output + 246), (work + 985), (9 * sizeof(double)));
    memcpy((output + 255), (work + 245), (9 * sizeof(double)));
    memcpy((output + 264), (work + 260), (9 * sizeof(double)));
    memcpy((output + 273), (work + 309), (9 * sizeof(double)));
    memcpy((output + 282), (work + 324), (9 * sizeof(double)));
    memcpy((output + 291), (work + 339), (9 * sizeof(double)));
    memcpy((output + 300), (work + 373), (9 * sizeof(double)));
    memcpy((output + 309), (work + 388), (9 * sizeof(double)));
    memcpy((output + 318), (work + 403), (9 * sizeof(double)));
    memcpy((output + 327), (work + 437), (9 * sizeof(double)));
    memcpy((output + 336), (work + 452), (9 * sizeof(double)));
    memcpy((output + 345), (work + 467), (9 * sizeof(double)));
    memcpy((output + 354), (work + 501), (9 * sizeof(double)));
    memcpy((output + 363), (work + 516), (9 * sizeof(double)));
    memcpy((output + 372), (work + 531), (9 * sizeof(double)));
    memcpy((output + 381), (work + 546), (9 * sizeof(double)));
    memcpy((output + 390), (work + 561), (9 * sizeof(double)));
    memcpy((output + 399), (work + 595), (9 * sizeof(double)));
    memcpy((output + 408), (work + 610), (9 * sizeof(double)));
    memcpy((output + 417), (work + 625), (9 * sizeof(double)));
    memcpy((output + 426), (work + 659), (9 * sizeof(double)));
    memcpy((output + 435), (work + 994), (9 * sizeof(double)));
    memcpy((output + 444), (work + 689), (9 * sizeof(double)));
    memcpy((output + 453), (work + 723), (9 * sizeof(double)));
    memcpy((output + 462), (work + 738), (9 * sizeof(double)));
    memcpy((output + 471), (work + 753), (9 * sizeof(double)));
    memcpy((output + 480), (work + 768), (9 * sizeof(double)));
    memcpy((output + 489), (work + 783), (9 * sizeof(double)));
    memcpy((output + 498), (work + 868), (9 * sizeof(double)));
    memcpy((output + 507), (work + 886), (9 * sizeof(double)));
    memcpy((output + 516), (work + 912), (3 * sizeof(double)));
    memcpy((output + 519), (work + 927), (3 * sizeof(double)));
    memcpy((output + 522), (work + 942), (3 * sizeof(double)));
    memcpy((output + 525), (work + 32), (3 * sizeof(double)));
    memcpy((output + 528), (work + 1006), (3 * sizeof(double)));
    memcpy((output + 531), (work + 47), (3 * sizeof(double)));
    memcpy((output + 534), (work + 96), (3 * sizeof(double)));
    memcpy((output + 537), (work + 1012), (3 * sizeof(double)));
    memcpy((output + 540), (work + 111), (3 * sizeof(double)));
    memcpy((output + 543), (work + 126), (3 * sizeof(double)));
    memcpy((output + 546), (work + 141), (3 * sizeof(double)));
    memcpy((output + 549), (work + 269), (3 * sizeof(double)));
    memcpy((output + 552), (work + 1018), (3 * sizeof(double)));
    memcpy((output + 555), (work + 1024), (3 * sizeof(double)));
    memcpy((output + 558), (work + 1030), (3 * sizeof(double)));
    memcpy((output + 561), (work + 254), (3 * sizeof(double)));
    memcpy((output + 564), (work + 1036), (3 * sizeof(double)));
    memcpy((output + 567), (work + 318), (3 * sizeof(double)));
    memcpy((output + 570), (work + 1042), (3 * sizeof(double)));
    memcpy((output + 573), (work + 333), (3 * sizeof(double)));
    memcpy((output + 576), (work + 382), (3 * sizeof(double)));
    memcpy((output + 579), (work + 1048), (3 * sizeof(double)));
    memcpy((output + 582), (work + 397), (3 * sizeof(double)));
    memcpy((output + 585), (work + 446), (3 * sizeof(double)));
    memcpy((output + 588), (work + 1054), (3 * sizeof(double)));
    memcpy((output + 591), (work + 461), (3 * sizeof(double)));
    memcpy((output + 594), (work + 510), (3 * sizeof(double)));
    memcpy((output + 597), (work + 1060), (3 * sizeof(double)));
    memcpy((output + 600), (work + 525), (3 * sizeof(double)));
    memcpy((output + 603), (work + 540), (3 * sizeof(double)));
    memcpy((output + 606), (work + 555), (3 * sizeof(double)));
    memcpy((output + 609), (work + 604), (3 * sizeof(double)));
    memcpy((output + 612), (work + 1066), (3 * sizeof(double)));
    memcpy((output + 615), (work + 619), (3 * sizeof(double)));
    memcpy((output + 618), (work + 1072), (3 * sizeof(double)));
    memcpy((output + 621), (work + 1078), (3 * sizeof(double)));
    memcpy((output + 624), (work + 1084), (3 * sizeof(double)));
    memcpy((output + 627), (work + 732), (3 * sizeof(double)));
    memcpy((output + 630), (work + 1090), (3 * sizeof(double)));
    memcpy((output + 633), (work + 747), (3 * sizeof(double)));
    memcpy((output + 636), (work + 762), (3 * sizeof(double)));
    memcpy((output + 639), (work + 777), (3 * sizeof(double)));
    memcpy((output + 642), (work + 862), (3 * sizeof(double)));
    memcpy((output + 645), (work + 880), (3 * sizeof(double)));
    memcpy((output + 648), (work + 1093), (3 * sizeof(double)));
    output[651] = work[1];
    memcpy((output + 652), (work + 8), (9 * sizeof(double)));
    output[661] = work[62];
    memcpy((output + 662), (work + 63), (9 * sizeof(double)));
    memcpy((output + 671), (work + 1096), (3 * sizeof(double)));
    memcpy((output + 674), (work + 1118), (9 * sizeof(double)));
    memcpy((output + 683), (work + 1149), (3 * sizeof(double)));
    memcpy((output + 686), (work + 1152), (3 * sizeof(double)));
    output[689] = work[895];
    output[690] = work[156];
    memcpy((output + 691), (work + 157), (9 * sizeof(double)));
    memcpy((output + 700), (work + 1127), (3 * sizeof(double)));
    memcpy((output + 703), (work + 1155), (9 * sizeof(double)));
    output[712] = work[220];
    memcpy((output + 713), (work + 221), (9 * sizeof(double)));
    memcpy((output + 722), (work + 1164), (3 * sizeof(double)));
    memcpy((output + 725), (work + 1186), (9 * sizeof(double)));
    output[734] = work[284];
    memcpy((output + 735), (work + 285), (9 * sizeof(double)));
    memcpy((output + 744), (work + 1195), (3 * sizeof(double)));
    memcpy((output + 747), (work + 1217), (9 * sizeof(double)));
    output[756] = work[348];
    memcpy((output + 757), (work + 349), (9 * sizeof(double)));
    memcpy((output + 766), (work + 1226), (3 * sizeof(double)));
    memcpy((output + 769), (work + 1248), (9 * sizeof(double)));
    output[778] = work[412];
    memcpy((output + 779), (work + 413), (9 * sizeof(double)));
    memcpy((output + 788), (work + 1257), (3 * sizeof(double)));
    memcpy((output + 791), (work + 1279), (9 * sizeof(double)));
    output[800] = work[476];
    memcpy((output + 801), (work + 477), (9 * sizeof(double)));
    memcpy((output + 810), (work + 1288), (3 * sizeof(double)));
    memcpy((output + 813), (work + 1310), (9 * sizeof(double)));
    output[822] = work[570];
    memcpy((output + 823), (work + 571), (9 * sizeof(double)));
    memcpy((output + 832), (work + 1319), (3 * sizeof(double)));
    memcpy((output + 835), (work + 1341), (9 * sizeof(double)));
    output[844] = work[634];
    memcpy((output + 845), (work + 635), (9 * sizeof(double)));
    memcpy((output + 854), (work + 1350), (3 * sizeof(double)));
    memcpy((output + 857), (work + 1372), (9 * sizeof(double)));
    output[866] = work[698];
    memcpy((output + 867), (work + 699), (9 * sizeof(double)));
    memcpy((output + 876), (work + 1381), (3 * sizeof(double)));
    memcpy((output + 879), (work + 1403), (9 * sizeof(double)));
    output[888] = work[792];
    memcpy((output + 889), (work + 793), (9 * sizeof(double)));
    memcpy((output + 898), (work + 1412), (3 * sizeof(double)));
    memcpy((output + 901), (work + 1434), (9 * sizeof(double)));
    output[910] = work[1443];
    output[911] = work[1444];
    output[912] = work[1445];
    memcpy((output + 913), (work + 47), (3 * sizeof(double)));
    memcpy((output + 916), (work + 1446), (3 * sizeof(double)));
    memcpy((output + 919), (work + 811), (3 * sizeof(double)));
    output[922] = work[1449];
    output[923] = work[1450];
    output[924] = work[1451];
    memcpy((output + 925), (work + 96), (3 * sizeof(double)));
    memcpy((output + 928), (work + 1452), (3 * sizeof(double)));
    memcpy((output + 931), (work + 815), (3 * sizeof(double)));
    output[934] = work[1455];
    output[935] = work[1456];
    output[936] = work[1457];
    memcpy((output + 937), (work + 1018), (3 * sizeof(double)));
    memcpy((output + 940), (work + 1458), (3 * sizeof(double)));
    memcpy((output + 943), (work + 1461), (3 * sizeof(double)));
    output[946] = work[1464];
    output[947] = work[1465];
    output[948] = work[1466];
    memcpy((output + 949), (work + 927), (3 * sizeof(double)));
    memcpy((output + 952), (work + 1467), (3 * sizeof(double)));
    memcpy((output + 955), (work + 827), (3 * sizeof(double)));
    output[958] = work[1470];
    output[959] = work[1471];
    output[960] = work[1472];
    memcpy((output + 961), (work + 333), (3 * sizeof(double)));
    memcpy((output + 964), (work + 1473), (3 * sizeof(double)));
    memcpy((output + 967), (work + 831), (3 * sizeof(double)));
    output[970] = work[1476];
    output[971] = work[1477];
    output[972] = work[1478];
    memcpy((output + 973), (work + 397), (3 * sizeof(double)));
    memcpy((output + 976), (work + 1479), (3 * sizeof(double)));
    memcpy((output + 979), (work + 835), (3 * sizeof(double)));
    output[982] = work[1482];
    output[983] = work[1483];
    output[984] = work[1484];
    memcpy((output + 985), (work + 540), (3 * sizeof(double)));
    memcpy((output + 988), (work + 1485), (3 * sizeof(double)));
    output[991] = work[1488];
    output[992] = work[1489];
    output[993] = work[1490];
    memcpy((output + 994), (work + 942), (3 * sizeof(double)));
    memcpy((output + 997), (work + 1491), (3 * sizeof(double)));
    memcpy((output + 1000), (work + 839), (3 * sizeof(double)));
    output[1003] = work[1494];
    output[1004] = work[1495];
    output[1005] = work[1496];
    memcpy((output + 1006), (work + 555), (3 * sizeof(double)));
    memcpy((output + 1009), (work + 1497), (3 * sizeof(double)));
    memcpy((output + 1012), (work + 847), (3 * sizeof(double)));
    output[1015] = work[1500];
    output[1016] = work[1501];
    output[1017] = work[1502];
    memcpy((output + 1018), (work + 619), (3 * sizeof(double)));
    memcpy((output + 1021), (work + 1503), (3 * sizeof(double)));
    memcpy((output + 1024), (work + 1506), (3 * sizeof(double)));
    output[1027] = work[1509];
    output[1028] = work[1510];
    output[1029] = work[1511];
    memcpy((output + 1030), (work + 777), (3 * sizeof(double)));
    memcpy((output + 1033), (work + 1512), (3 * sizeof(double)));
    output[1036] = work[1515];
    output[1037] = work[1516];
    output[1038] = work[1517];
    memcpy((output + 1039), (work + 1518), (3 * sizeof(double)));
    memcpy((output + 1042), (work + 1521), (3 * sizeof(double)));
    memcpy((output + 1045), (work + 855), (3 * sizeof(double)));
    output[1048] = work[1524];
    output[1049] = work[1525];
    output[1050] = work[1526];
    memcpy((output + 1051), (work + 1527), (3 * sizeof(double)));
    memcpy((output + 1054), (work + 1530), (3 * sizeof(double)));
    memcpy((output + 1057), (work + 1533), (3 * sizeof(double)));
    output[1060] = work[1536];
    output[1061] = work[1537];
    output[1062] = work[1538];
    memcpy((output + 1063), (work + 1539), (3 * sizeof(double)));
    memcpy((output + 1066), (work + 1542), (3 * sizeof(double)));
    memcpy((output + 1069), (work + 823), (3 * sizeof(double)));
    output[1072] = work[1545];
    output[1073] = work[1546];
    output[1074] = work[1547];
    memcpy((output + 1075), (work + 1548), (9 * sizeof(double)));
EXIT_POINT:
    (void)msg;
    (void)msg_size;
    return error;
}
