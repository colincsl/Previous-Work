#!/usr/bin/env python

import sys, os

import mrol_mapping.mapper as mapper
import numpy as np
import mrol_mapping.mrol as mrol
import mrol_mapping.poseutil as poseutil
import mrol_mapping.pointcloud as pointcloud
import time
import read_groundtruth as truth

import pdb


class PoseEstimator:

	def __init__(self, mrolLevels = 4, res = .006, transThresh=.03, rotThresh=5.0, viz = 0):
	
		self.mrolLevels  = mrolLevels 		#number of self.resolution layers for MROL
		self.res 		 = res				#self.resolution in meters
		self.transThresh = transThresh 		# Threshold for merging PCs -- in meters
		self.rotThresh   = rotThresh 		#pd Threshold for merging PCs -- in degrees	
	
		self.baseDir = sys.argv[0][0:sys.argv[0].rfind('/')+1] + 'data/'
#		self.baseDir = 'data/'+objectName+'/'
		
#		self.pose_list = []

#		for i in range(self.truth_T.shape[2]):
#			P =  poseutil.Pose3D()
#			P.setMatrix(self.truth_T[:,:,i])	
#			self.pose_list.append(P)



		self.models = []
		self.models_vox = []
		self.all_names = []
		
		self.store_objects()

	
	def run(self, current_pc, current_centroid,name_list = []):
		scores, poses = self.match_all(current_pc, current_centroid, name_list)

		return scores, poses


	''' Get all pointcloud filenames '''
	def store_objects(self, name_list = None):
		# Use name_list to only import selected object models

		dirs = os.walk(self.baseDir)

		root = []
		folders = []
		files = []

		for i in dirs:
			root.append(i[0])
			folders.append(i[1])
			files.append(i[2])
		
		for i in range(len(root)):
			for j in range(len(files[i])):
				PC_index = files[i][j].find(".txt")
#				PC_index = files[i][j].find("_PC")				
				if PC_index>-1:
					if name_list == None:
						object_name = files[i][j][:PC_index]
						filename = root[i]+'/'+files[i][j]
						self.all_names.append(object_name)
						pc = np.loadtxt(filename)
						self.models.append(pc)
						self.models_vox.append(pointcloud.PointCloud(pc))						
					# If there is a name list, only accept pointclouds from that list
					else:
						object_name = files[i][j][:end_name_ind]
						filename = root[i]+'/'+files[i][j]
						
						for i_name in range(len(name_list)):
							if object_name == name_list[i_name]:
								self.all_names.append(object_name)
								pc = np.loadtxt(filename)
								self.models.append(pc)
								self.models_vox.append(pointcloud.PointCloud(pc))
		
		self.modelCount = len(self.models)



	'''Match -- test all models'''
	def match_all(self, current_pc, current_centroid=[], name_list = []):
		pdb.set_trace()
		vmap = mapper.VoxelMap(self.res, levels = self.mrolLevels)	
		pose_zero = poseutil.Pose3D()
		pose_zero.set((0,0,0,0,0,0))
		poseList = []
		costList = []
		centroid_input = 0
		current_centroid_local = np.zeros(3)
		
		if current_centroid==[]:
			centroid_input = 1

		if centroid_input==[]:
			current_centroid = np.mean(current_pc, axis=0)			

		current_pc -= current_centroid
		current_pc_vox = pointcloud.PointCloud(current_pc)
		rad = .2
		current_pc_vox.boxfilter(xmin=-rad, xmax=rad, ymin=-rad, ymax=rad, zmin=-rad, zmax=rad)
		
		if centroid_input:
			current_centroid_local = np.mean(current_pc_vox.points, axis=0)
			current_pc_vox -= current_centroid_local
			
		vmap.add_points(current_pc_vox, pose_zero)
		
		for i in range(self.modelCount):
			#Check to see if 
			for j in range(len(name_list)):
#				print self.all_names[i]
#				print name_list[j]
#				print self.all_names[i]==name_list[j]
				if (name_list == [] and j == 0) or self.all_names[i] == name_list[j]:

					pc_ground_vox = self.models_vox[i]
					
					bestPose, maxCost = vmap.align_points(pc_ground_vox, pose_zero)
		#			print "Pose: ", bestPose
		#			print "Max cost: ", maxCost
					bestPose_inv = poseutil.inverse(bestPose.get())
					bestPose_inv = poseutil.Pose3D(bestPose_inv)

					modelPose_T = current_centroid + current_centroid_local + bestPose_inv.get()[0:3]
					modelPose = np.reshape([modelPose_T, bestPose_inv.get()[3:]], 6)
					poseList.append(modelPose)
					costList.append(maxCost)
			
		#			mat = poseutil.Pose3D()
		#			mat.set(bestPose.get())

					if 0:
						xyzs = poseutil.transformPoints(pc_ground_vox.points, bestPose.getMatrix())
						pc = pointcloud.PointCloud(xyzs)
						pdb.set_trace()


		return costList, poseList

			

#		cloud1 = np.load(self.PC_files[0]) #use self.PC_files_reg
#		xyzs = np.array((cloud1['x'], cloud1['y'], cloud1['z'])).T
#		pc = pointcloud.PointCloud(xyzs)
#		#pc.boxfilter(xmin=self.boxFilter[0], xmax=self.boxFilter[1],ymin=self.boxFilter[2], ymax=self.boxFilter[3],zmin=self.boxFilter[4], zmax=self.boxFilter[5])
#		pose = self.pose_list[0]#np.load(self.PC_files_reg_all[0])['pose']
#		pc.set(pose)
#		PCs.append(pc)
#		self.vmap.add_points(PCs[0], PCs[0].pose)
#	
#		guessPose = PCs[0].pose
#	
#		cloud2 = np.load(self.PC_files_reg[1])	
#		xyzs = np.array((cloud2['x'], cloud2['y'], cloud2['z'])).T
#		pc = pointcloud.PointCloud(xyzs)
#	
#		start = time.time()
#		bestpose, maxcost = self.vmap.align_points(pc, guessPose)
#		taken = time.time() - start
#		print 'Scanmatch time:', taken, 'seconds'
#		print "Pose: ", bestpose
#		print "Max cost: ", maxcost

		#PCs[0].display(color=(1,0,0))
		#check_localise(bestpose, truepose)


#	'''Create 3D model using MROL align -- NIST data'''
#	def create_model(self):

#		PCs_added = 0
#		if self.fileCount > 1:
#			for j in range(0,self.fileCount, 1):
##				print 'File %i of %i' %(j, self.fileCount)
#				data = np.load(self.PC_files[j]) #should be self.PC_files_reg
#				xyzs = np.array((data['x'], data['y'], data['z'])).T

#				pose = self.pose_list[j]#np.load(self.PC_files_reg_all[j])['pose']
#				pose_zero = poseutil.Pose3D()
#				pose_zero.set((0,0,0,0,0,0))

#				xyzs = poseutil.transformPoints(xyzs, pose.getMatrix())
#				pc = pointcloud.PointCloud(xyzs)
#				pc.pose = pose_zero#pose
#	#			pdb.set_trace()
#				pc.boxfilter(xmin=self.boxFilter[0], xmax=self.boxFilter[1],ymin=self.boxFilter[2], ymax=self.boxFilter[3],zmin=self.boxFilter[4], zmax=self.boxFilter[5])
#	#			print pose


#				if j==0: #Don't try to align first pose
#					self.vmap.add_points(pc, pc.pose)
#				else:
#					guessPose = pose_zero#self.pose_list[i]#np.load(self.PC_files_reg_all[i])['pose']
#					bestPose = guessPose
#				
#	#				print guessPose
#					bestPose, maxcost = self.vmap.align_points(pc, guessPose)
#	#				bestPose, maxcost = self.vmap.align_points(pc, guessPose, True) #only 2D alignment
#					disp = np.array(bestPose.getTuple())
#					if all(np.abs(disp[:3]) < self.transThresh) and all(np.abs(disp[3:])<self.rotThresh*3.14/180.):
#						self.vmap.add_points(pc, bestPose)
#						PCs_added +=1
##						print '%i PCs added'%PCs_added
##					print "Best Pose: ", bestPose						

#	#				guessPose = bestpose
#	#				print "Pose from ground: ", guessPose	

#		print '%i of %i point clouds were added' %(PCs_added, self.fileCount)


	'''Test localization of outputted model with original scene'''
	def localize_test(self):
		cloud1 = np.load(self.PC_files[0]) #use self.PC_files_reg
		xyzs = np.array((cloud1['x'] , cloud1['y'] , cloud1['z'] )).T
		pc = pointcloud.PointCloud(xyzs)
		pc.boxfilter(xmin=self.boxFilter[0], xmax=self.boxFilter[1],\
					 ymin=self.boxFilter[2], ymax=self.boxFilter[3],\
					 zmin=self.boxFilter[4], zmax=self.boxFilter[5])
		pose = self.pose_list[0]#(0,0,0,0,0,0)#
	#	pc.pose = pose
		PCs.append(pc)

		self.vmap.add_points(PCs[0], PCs[0].pose)

		''' Import object '''
		data = np.load('data/merged_PC_aligned.npy')
		xyzs = np.array((data[:,0], data[:,1], data[:,2])).T
		centroid = np.mean(xyzs, axis=0)
		xyzs[:,0] -= centroid[0]
		xyzs[:,1] -= centroid[1]
		xyzs[:,2] -= centroid[2]
	
	#	pose = (0,0,0,0,0,0)#self.pose_list[0]
		centroid_self.vmap = np.mean(self.vmap.get_points().points, axis=0)
		guessPose = (centroid_self.vmap[0], centroid_self.vmap[1], centroid_self.vmap[2], 0, 0, 0) #(0,0,0,0,0,0)#self.pose_list[0]#(0,0,0,0,0,0)
	#	xyzs = np.array((data['x'], data['y'], data['z'])).T
		pc = pointcloud.PointCloud(xyzs)
	
		bestpose, maxcost = self.vmap.align_points(pc, guessPose)
#		pdb.set_trace()
		self.vmap.add_points(pc, bestpose)
		print "GuessPose: ", guessPose
		print "BestPose: ", bestpose
		print "Max cost: ", maxcost



	def display(self):
		data = self.vmap.get_points()
	#	rad = .1
	#	data.boxfilter(xmin=-rad, xmax=rad,ymin=-rad, ymax=rad,zmin=-.1, zmax=self.boxFilter[5])
		data.display()


