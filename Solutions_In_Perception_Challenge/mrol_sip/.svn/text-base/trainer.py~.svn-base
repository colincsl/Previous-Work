#! /usr/bin/python

'''
Entry into the Solutions In Perception Challenge, 2011
University at Buffalo - Team Franklin
Authors: Colin Lea, Julian Ryde, Nick Hillier, Jason Corso
Contact: colincsl@gmail.com

This file is used as a shell to interface with the training code. It reads a rosbag file, does the training, and outputs Numpy binary files for use in the detection phase.

General form to run:
rosrun tod_stub trainer -B <BAGFILE_NAME>.bag --fiducial <FIDUCIAL_NAME>.yml -C <USER_DEFINED_CONFIG_FILE>.yaml --image <IMAGE_TOPIC> --camera_info <CAMERA_INFO_TOPIC> --points <POINT_CLOUD2_TOPIC> --team_name <TEAM_NAME> --run_number <RUN_ID> --object_id <OBJECT_ID>

Example command to run:
1) NIST using fiducial
rosrun mrol_sip trainer.py -B ~/tod_stub_dev/tod_stub/bin/obj16.bag --fiducial fiducial.yaml -C config.yaml --image image --camera_info camera_info --points points2 --team_name TeamFranklin --run_number 0 --object_id example

2) NIST using pose
rosrun mrol_sip trainer.py -B ~/sip_data/obj16_with_pose.bag --fiducial fiducial.yaml -C config.yaml --image image --camera_info camera_info --points points2 --team_name TeamFranklin --run_number 0 --object_id NIST --pose pose

3) Object 1
rosrun mrol_sip trainer.py -B ~/sip_data/training_new/object_01.bag --fiducial fiducial.yaml -C config.yaml --image image --camera_info camera_info --points points --team_name TeamFranklin --run_number 0 --object_id odwalla --pose pose

'''

import roslib
roslib.load_manifest('mrol_sip')
import rospy
import sys, os
from sensor_msgs.msg import LaserScan
from sensor_msgs.msg import PointCloud2
from sensor_msgs.msg import PointField
import tf
import rosbag

import mrol_mapping.pointcloud as pointcloud

#MROL
import mrol_mapping.mapper as mapper
import mrol_mapping.mrol as mrol
import mrol_mapping.poseutil as poseutil
import mrol_mapping.pointcloud as pointcloud

from trainingFeatureExtractor import trainingFeatureExtractor as featureExtract
from trainingModelGenerator import*
from rosbag_to_3d_model import bag2model
import numpy as np
import write_csv
import time
import pdb


def rodrigues2mat(rot):
#	pdb.set_trace()
	theta = np.sqrt(np.sum(np.power(rot,2)))
	rot /= theta
	I = np.eye(3)
	cos_th = np.cos(theta)
	r_mat = np.matrix([[0, -rot[2], rot[1]], [rot[2], 0, -rot[0]], [-rot[1], rot[0], 0]])
	
	R = cos_th*I + (1-cos_th)*(np.matrix(rot).T*np.matrix(rot)) + np.sin(theta)*r_mat
	
	return R


if __name__ == "__main__":

	#defaults:
	bagName = []
	configName = 'config.yaml'
	imageTopic = 'image'
	pcTopic = 'points2'
	cameraInfo = []
	teamName = 'teamFranklin'
	runNumber = 0
	objectID = []
	pose = None
	fiducialName = []
	viz = 0
	
	frame = 1
	
	# mrol defaults
	mrol_res = 0.002
	mrol_levels = 4

#	print sys.argv
	current_dir = sys.argv[0]
	baseDir = sys.argv[0][0:sys.argv[0].rfind('/')+1] + 'data/'
	
	# Read input arguments
	if len(sys.argv)>1:
		for i in range(1,len(sys.argv), 2):
			if sys.argv[i] == '-B':
				bagName = sys.argv[i+1]
			elif sys.argv[i] == '-C':
				configName = sys.argv[i+1]
			elif sys.argv[i] == '--fiducial':
				fiducialName = sys.argv[i+1]				
			elif sys.argv[i] == '--image':
				imageTopic = sys.argv[i+1]
			elif sys.argv[i] == '--camera_info':
				cameraInfo = sys.argv[i+1]
			elif sys.argv[i] == '--points':
				pcTopic = sys.argv[i+1]
			elif sys.argv[i] == '--team_name':
				teamName = sys.argv[i+1]
			elif sys.argv[i] == '--run_number':
				runNumber = sys.argv[i+1]
			elif sys.argv[i] == '--object_id':
				objectID = sys.argv[i+1]
			elif sys.argv[i] == '--pose':
				pose = sys.argv[i+1]
			else:
				print "Error in input arguments:"
				print sys.argv[i], sys.argv[i+1]				

	# Initialize CSV file
	
	time_ = time.gmtime()
#	saveDir = current_dir[0:current_dir.rfind('/')] + '/data/'
	outputName = 'RUN'+ '%04i' %int(runNumber) + "_" + teamName + "_" +  '%4i%02i%02i' %(time_[0], time_[1], time_[2]) +"_" + '%02i'%time_[3] + ':' + '%02i'%time_[5] +':'+ '%02i'%time_[6] + '.csv'
	print baseDir+outputName
	output = write_csv.write2csv(baseDir+outputName, runNumber)
	
	# Initialize MROL for visusalization
#	P =  poseutil.Pose3D()
	if viz:
		vmap = mapper.VoxelMap(mrol_res, levels = mrol_levels)
		vmap.display(npts=4e5)

	# Look through data
	if bagName == []:
		print "Error: No bag name"
	else:
		bag = bag2model(bagName)
		
		# Get Camera info once
		if cameraInfo != []:
			msg_camera = bag.bag.read_messages(topics=cameraInfo)
			bag.camera_info(msg_camera)
			
		if pose != None:
			msg_pose = bag.bag.read_messages(topics=pose)
			pose_list = []

		print pcTopic
		msg_cloud = bag.bag.read_messages(topics=pcTopic)
		
		if msg_cloud == []:
			print 'Error getting data from the pointcloud message'
			raise
		
		#Get rid of previous dift points for this objectID
		print baseDir+objectID
		try:
			os.system('rm -rf '+baseDir+objectID)		
		except:
			pass
		
		# Get all pointsclouds from the image 
		try:
			while 1:
	#			while frame < 5:

				pts_pos, pts_color, msg_cloud, ros_time, frame_new = bag.next_depth(msg_cloud)
				
				frame = frame_new
				print 'Current frame: ', frame
				time_ = time.gmtime()
				time_out = '%02i.%02i.%02i.%03i' %(time_[3], time_[4], time_[5], abs(ros_time.to_sec()-round(ros_time.to_sec()))*1000)
	#			print time_out

				if pose != None:
					_, new_pose, ros_time = msg_pose.next()

					rot = np.array(new_pose.rvec)#*180./3.14159
					rot_mat = rodrigues2mat(rot)
					trans = np.array(new_pose.tvec)
				
					T = np.eye(4)
					T[0:3, 0:3] = rot_mat
					T[0:3, 3] = trans

					P = poseutil.Pose3D()
					P.setMatrix(T)
					new_pose = poseutil.inverse(P.get())

					pose_list.append(new_pose)
				
				outDir = baseDir+objectID+'/'
				bag.save_pts(pts_pos, pts_color, objectID, out_folder=outDir)
			
				pc_6D = np.empty((pts_pos.shape[1], 6))
				pc_6D[:,0:3] = pts_pos.T
				pc_6D[:,3:6] = pts_color

				feature = featureExtract(objectID, poseutil.mat(new_pose), pointcloud=pc_6D)
			

				poses = np.array([[0,0,0,0,0,0]])
				T = trans
				R = np.array(rot_mat)
				oID = 0
				dID = objectID
					
				# data is a dictionary with elements time, frame, dID, oID, R (3x3), T (3x1)
				data = {'time':time_out,'frame': frame, 'oID':oID, 'dID':dID, 'R':R, 'T':T}
				output.write_data(data)						
			
			
				#Visualize
				if viz:
					pc = pointcloud.PointCloud(pts_pos.T)
					P =  poseutil.Pose3D()
					P.set((0,0,0,0,0,0))
					print 'Adding new points for visualization...'
		#			pc.set(P)
					vmap.add_points(pc, P)

				frame+=1
		except:
			print 'Done extracting texture (Or Error if 0 pointclouds are added!)'
			
		
		modelGen = modelGenerator(objectID, pose_list)
		os.system('rm '+baseDir+objectID+'/'+'pc*.npy')
		print 'Done creating ' + objectID + ' model'

